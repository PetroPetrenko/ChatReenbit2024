// –°–ø–∏—Å–æ–∫ API –¥–ª—è —Ü–∏—Ç–∞—Ç —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
const QUOTE_APIS = [
  'https://api.quotable.io/random',
  'https://type.fit/api/quotes'
];

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
const FALLBACK_QUOTES = [
  {
    text: "–í–µ—Ä—å—Ç–µ –≤ —Å–µ–±—è –∏ —É –≤–∞—Å –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è.",
    author: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä",
    tags: ["motivation"]
  },
  {
    text: "–£—Å–ø–µ—Ö - —ç—Ç–æ —Å—É–º–º–∞ –º–∞–ª—ã—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—ã—Ö –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å.",
    author: "–†–æ–±–µ—Ä—Ç –ö–æ–ª—å–µ",
    tags: ["success"]
  },
  {
    text: "–í–∞–∂–Ω–∞ –Ω–µ –ø–æ–±–µ–¥–∞, –∞ —É—á–∞—Å—Ç–∏–µ.",
    author: "–ü—å–µ—Ä –¥–µ –ö—É–±–µ—Ä—Ç–µ–Ω",
    tags: ["inspiration"]
  }
];

import { toast } from 'react-toastify';

const localQuotes = [
  { content: "–£—Å–ø–µ—Ö - —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞.", author: "–£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å" },
  { content: "–í–µ–ª–∏—á–∞–π—à–∞—è —Å–ª–∞–≤–∞ –≤ –∂–∏–∑–Ω–∏ —Å–æ—Å—Ç–æ–∏—Ç –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞—Ç—å, –∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è.", author: "–ù–µ–ª—å—Å–æ–Ω –ú–∞–Ω–¥–µ–ª–∞" },
  { content: "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ–µ —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞–Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–º –∑–∞–≤—Ç—Ä–∞.", author: "Walt Disney" },
  { content: "–ñ–∏–∑–Ω—å - —ç—Ç–æ —Ç–æ, —á—Ç–æ —Å —Ç–æ–±–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ —Ç—ã –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞–Ω–∞–º–∏.", author: "–î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω" },
  { content: "–í–µ—Ä—å –≤ —Å–µ–±—è –∏ –≤ —Ç–æ, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å, –∏ –≤ —Å–≤–æ–∏ –º–µ—á—Ç—ã.", author: "–°—Ç–∏–≤ –î–∂–æ–±—Å" }
];

class QuoteManager {
  constructor() {
    // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ç–∞—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    this.chatQuotes = new Map();
  }

  async getQuoteForChat(chatId) {
    // –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —É–∂–µ –±—ã–ª–∞ —Ü–∏—Ç–∞—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
    if (this.chatQuotes.has(chatId)) {
      return this.chatQuotes.get(chatId);
    }

    try {
      const response = await fetch('https://api.quotable.io/random', {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
      }

      const data = await response.json();
      
      const quote = {
        text: data.content,
        author: data.author,
        timestamp: Date.now()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏—Ç–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
      this.chatQuotes.set(chatId, quote);

      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã
      console.log('üåê –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç—ã');
      console.log('‚úÖ –¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞:', quote);

      return quote;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
      
      toast.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞.', {
        position: "bottom-right",
        autoClose: 3000
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ª–æ–∫–∞–ª—å–Ω—É—é —Ü–∏—Ç–∞—Ç—É
      const fallbackQuote = localQuotes[Math.floor(Math.random() * localQuotes.length)];
      
      const quote = {
        text: fallbackQuote.content,
        author: fallbackQuote.author,
        timestamp: Date.now()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º fallback —Ü–∏—Ç–∞—Ç—É
      this.chatQuotes.set(chatId, quote);

      return quote;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ü–∏—Ç–∞—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
  clearChatQuote(chatId) {
    this.chatQuotes.delete(chatId);
  }

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
  clearAllChatQuotes() {
    this.chatQuotes.clear();
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä QuoteManager
export const quoteManager = new QuoteManager();

export { localQuotes };

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç
async function fetchWithFallback(urls, options = {}) {
  const defaultOptions = {
    timeout: 5000,
    fallbackData: null,
    transformResponse: (data) => data
  };
  const mergedOptions = { ...defaultOptions, ...options };

  for (const url of urls) {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), mergedOptions.timeout);

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        throw new Error(`HTTP –æ—à–∏–±–∫–∞! —Å—Ç–∞—Ç—É—Å: ${response.status}`);
      }

      const rawData = await response.json();
      return mergedOptions.transformResponse(rawData);
    } catch (error) {
      console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å ${url}:`, error);
      continue;
    }
  }

  console.warn('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∏—Å—å');
  return mergedOptions.fallbackData || FALLBACK_QUOTES[Math.floor(Math.random() * FALLBACK_QUOTES.length)];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
export const fetchRandomQuote = async (userId, options = {}) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ü–∏—Ç–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (userQuoteCache.has(userId)) {
    return userQuoteCache.get(userId);
  }

  const { 
    category = null,  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ü–∏—Ç–∞—Ç—ã
    tags = []         // –¢–µ–≥–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ü–∏—Ç–∞—Ç
  } = options;

  try {
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å —É—á–µ—Ç–æ–º —Ç–µ–≥–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const url = new URL('https://api.quotable.io/random');
    if (category) {
      url.searchParams.append('tags', category);
    }
    if (tags && tags.length > 0) {
      tags.forEach(tag => url.searchParams.append('tags', tag));
    }

    const data = await fetchWithFallback(QUOTE_APIS, {
      fallbackData: localQuotes[Math.floor(Math.random() * localQuotes.length)],
      transformResponse: (data) => {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
        if (data.content) {  // Quotable API
          return {
            text: data.content,
            author: data.author,
            category: data.tags?.[0] || 'general'
          };
        }
        if (Array.isArray(data)) {  // type.fit API
          const quote = data[Math.floor(Math.random() * data.length)];
          return {
            text: quote.text,
            author: quote.author,
            category: 'general'
          };
        }
        return data;
      }
    });

    if (!data) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
    }

    const quote = {
      text: data.text || '–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      author: data.author || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä',
      category: data.category || '–†–∞–∑–Ω–æ–µ'
    };

    // –ö—ç—à–∏—Ä—É–µ–º —Ü–∏—Ç–∞—Ç—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userQuoteCache.set(userId, quote);

    return quote;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    toast.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ü–∏—Ç–∞—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞.', {
      position: "bottom-right",
      autoClose: 3000
    });

    // –í–æ–∑–≤—Ä–∞—Ç —Å–ª—É—á–∞–π–Ω–æ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
    const fallbackQuote = localQuotes[Math.floor(Math.random() * localQuotes.length)];
    
    // –ö—ç—à–∏—Ä—É–µ–º fallback —Ü–∏—Ç–∞—Ç—É
    userQuoteCache.set(userId, {
      text: fallbackQuote.content,
      author: fallbackQuote.author
    });

    return {
      text: fallbackQuote.content,
      author: fallbackQuote.author
    };
  }
};

// –ö—ç—à —Ü–∏—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const userQuoteCache = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ —Ü–∏—Ç–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∏–ª–∏ logout)
function clearUserQuoteCache(userId) {
  if (userId) {
    userQuoteCache.delete(userId);
  } else {
    userQuoteCache.clear();
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤
export const getQuoteCategories = async () => {
  try {
    const response = await fetch('https://api.quotable.io/tags');
    const tags = await response.json();
    return tags.map(tag => tag.name).slice(0, 10); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–µ–≥–æ–≤
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
    return ['motivation', 'success', 'life', 'wisdom', 'inspiration'];
  }
};

export { clearUserQuoteCache };
